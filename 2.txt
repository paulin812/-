Обработка на колекции от данни

1.Сорс-контрол системата (source control system) е софтуерен инструмент, който управлява версиите на изходния код на един или повече проекти. Това означава, че създава копия на изходния код в различни точки във времето, позволявайки на разработчиците да връщат и разглеждат предишни версии на кода и да следят промените направени в него.
Командите, които се използват за работа със сорс-контрол системите, включват:
clone - копира съдържанието на репозитория на локалната машина
add - добавя файлове към индекса на репозиторията
commit - записва промените направени в репозиторията
push - качва промените направени локално към сървъра
pull - изтегля промените направени на сървъра към локалната машина
merge - слива две или повече гранки от изходния код
revert - връща на по-ранна версия на изходния код
Централизираните сорс-контрол системи имат един централен сървър, който съхранява репозиторията. Разработчиците качват своите промени към централния сървър и изтеглят промените направени от други разработчици. Примери за централизирани сорс-контрол системи са Subversion (SVN) и Team Foundation Server (TFS).
Децентрализираните сорс-контрол системи съхраняват копия на репозиторията на локалните машини на разработчиците. Това позволява на разработчиците да работят без постоянна връзка към централен сървър. Примери за децентрализирани сорс-контрол системи са Git и Mercurial.

2.Типовете данни определят каква информация може да се съхранява в променливите или обектите в програмата. В общи линии, типовете данни могат да бъдат разделени на прости и сложни. Простите типове данни включват цели числа, дробни числа, символи и булеви стойности. Сложните типове данни включват масиви, структури, обекти и други.
Обектите са инстанции на класове, които имат определени свойства и методи за работа с тези свойства. Те могат да бъдат използвани за представяне на конкретни неща в програмата, като например потребители, продукти, поръчки и други.
Бройните системи са начин за представяне на числа в различни бройни основи. Най-често използваните бройни системи са десетичната (основа 10), двоичната (основа 2), осмичната (основа 8) и шестнадесетичната (основа 16). Операциите в бройни системи включват събиране, изваждане, умножение, деление и други.
За да се преобразува число от една бройна система в друга, трябва да се използва подходяща формула за преобразуване. Например, за да се преобразува число от десетична в двоична бройна система, можем да използваме алгоритъма за деление на 2. Обратната операция – преобразуване на число от двоична в десетична бройна система може да бъде извършена чрез умножение на степени на 2.
Изчисленията в бройни системи се извършват по същия начин като изчисленията в десетична бройна система, като операциите се извършват с числата в съответната бройна система. Например, събирането на две числа в двоична бройна система може да бъде извършено чрез събиране на отделните им битове с добавяне на носител при необходимост.

3.Едномерен масив е структура от данни, която съхранява последователно редица от елементи от един и същи тип. В C# едномерен масив се декларира като указва типа на елементите, следван от квадратни скоби, в които се посочва броя на елементите в масива. 
Многомерни масиви са масиви, които имат две или повече размерности. В C# многомерен масив се декларира като указва типа на елементите, следван от квадратни скоби, като за всяка размерност се посочва броя на елементите. 
За да достъпите елемент в масив, трябва да посочите индекса му в квадратни скоби след името на масива.
За да достъпите елемент в многомерен масив, трябва да посочите индексите на всички размерности в квадратни скоби след името на масива. 
Едномерните и многомерните масиви могат да бъдат използвани за съхранение на данни и за извършване на различни операции с тях. Например, можете да използвате масив за изчисляване на средната стойност на няколко числа или за съхранение на координатите на точки в пространството.
Една от най-често срещаните операции върху масиви е обхождане на всички елементи в масива. 

4.Списъците са структури от данни, които могат да пазят поредица от елементи. В отличие от масивите, списъците не имат фиксирана големина, т.е. могат да бъдат удължавани или скъсявани динамично.
Декларирането на списъци в зависимост от програмния език може да варира, но обикновено се използва ключовата дума "List". Например, в C# може да декларирате списък по следния начин:
List<int> numbers = new List<int>();
Основните операции, които могат да се извършват върху списъците са:
-добавяне на елемент в края на списъка
-добавяне на елемент в началото на списъка
-вмъкване на елемент на определена позиция в списъка
-изтриване на елемент от списъка
-търсене на елемент в списъка
-обхождане на всички елементи в списъка
Алгоритмите върху списъците са подобни на тези върху масивите, като могат да се използват цикли, условни оператори и други конструкции.
Предимствата на списъците спрямо масивите са свързани с тяхната динамичност, която позволява лесно добавяне и изтриване на елементи без да е необходимо да се заделя памет отново. Недостатъците на списъците са свързани с това, че обикновено са малко по-бавни от масивите при изпълнение на определени операции, като търсене и достъп до елементи.

5.Дебъгването е процесът на отстраняване на грешки (бъгове) в програмен код. Това е важна част от разработката на софтуер, тъй като всеки програмист ще се сблъска с проблеми, които трябва да бъдат отстранени.
Дебъгерът е софтуерен инструмент, който помага на програмиста да открие и отстранява проблеми в програмата. Той позволява на програмиста да стъпи по програмния код и да наблюдава стойностите на променливите във всеки момент от изпълнението на програмата.
Най-често използваните функции на дебъгера са:
Брейкпойнт - място в програмния код, където програмата спира и чака за действие на програмиста. Това позволява на програмиста да анализира състоянието на програмата в момента на изпълнение.
Стъпване - позволява на програмиста да изпълни програмата стъпка по стъпка и да анализира състоянието на програмата във всеки момент.
Преглед на стойности на променливи - позволява на програмиста да проследи стойностите на променливите във всеки момент от изпълнението на програмата.
Инспекция на стека - позволява на програмиста да види състоянието на стека във всеки момент от изпълнението на програмата.
За да използвате дебъгер, трябва да следвате няколко стъпки:
Декларирайте брейкпойнт на мястото в програмния код, където искате програмата да спре.
Стартирайте програмата в режим на дебъгване.
Изпълнете програмата до мястото на брейкпойнта.
Използвайте функциите на дебъгера, за да анализирате състоянието на програмата във всеки момент от изпълнението й.
С помощта на дебъгера можете да откриете и отстраните грешките в програмата си по-бързо и ефективно. Това е особено полезно, когато работите с по-големи програми

6.Символен низ или низ от символи е последователност от знаци, като букви, цифри, празни пространства, пунктуационни знаци и други символи. В програмирането, символните низове се представят като масиви от символи.
Методите за работа със символни низове включват множество вградени функции, които могат да се използват за обработка на текст. Някои от най-често използваните методи в C# са:
Length - връща дължината на символния низ.
Substring - извлича подниз от даден символен низ.
Replace - заменя всички срещания на даден символен низ с друг символен низ.
ToLower / ToUpper - преобразуват всички букви в символен низ към малки/главни букви.
Trim - премахва празните пространства в началото и края на символен низ.
Декларирането на символен низ става чрез използване на ключовата дума string за C# и char[] за други езици.
Разработването на алгоритми върху символни низове е често срещано в програмирането, особено при обработката на текст. Някои от тези алгоритми могат да включват извличане на поднизове, търсене на думи, замяна на даден текст, проверка на валидност на символен низ и други.
Предимствата на символните низове спрямо масивите включват по-лесната работа с текст, както и вградените методи за обработка на низове.

7.Речникът (хеш-таблицата) е структура от данни, която позволява съхраняване и достъп до елементи по ключ. Всяка стойност в речника е свързана с уникален ключ, който се използва за да се получи достъп до нея. Хеш-таблицата се реализира с помощта на хеш функция, която генерира индекс за съхраняване на стойността във вътрешното представяне на речника.
Декларирането на речник в различни програмни езици може да се прави по различен начин.
В C# декларирането на речник става с помощта на класа Dictionary<TKey, TValue>
Някои от основните методи за работа с речници са:
Add(key, value): добавя нова двойка ключ-стойност в речника
Remove(key): премахва двойката ключ-стойност, свързана с дадения ключ
ContainsKey(key): проверява дали речника съдържа дадения ключ
ContainsValue(value): проверява дали речника съдържа дадената стойност
TryGetValue(key, out value): опитва се да извлече стойността, свързана с дадения ключ, и да я върне като изходен параметър. Ако ключът не съществува, връща се стойност по подразбиране.
Решаването на задачи с речници включва търсене на стойности по ключ, добавяне на нови стойности, извличане на всички ключове или стойности, сортиране на ключовете и др.
Една от най-големите предимства на речниците е бързият достъп до стойности по ключ. Въпреки това, те имат и някои недостатъци, като например несъхранението на реда на елементите.

8.Определянето на реда на изпълнение на фрагментите в кода (program flow) е процесът на анализиране на програмен код, за да се определи последователността на изпълнение на различни фрагменти от кода.
За да се определи редът на изпълнение на фрагментите в кода, трябва да се анализира структурата на програмата, като се обръща внимание на операторите за контрол на програмния поток (условни оператори, цикли и др.) и на мястото, където са разположени различните фрагменти от кода.
В общия случай, програмният код се изпълнява последователно от горе надолу, като се изпълняват всички оператори, докато не се стигне края на програмата. Въпреки това, операторите за контрол на програмния поток променят този ред на изпълнение, като позволяват на програмата да избира между различни пътища на изпълнение в зависимост от различни условия.
Например, ако имаме условен оператор "if", програмата ще провери дали дадено условие е вярно и ако е така, ще изпълни определени фрагменти от кода. Ако условието е грешно, програмата ще пропусне тези фрагменти от кода и ще продължи с изпълнението на следващите оператори.
Затова, за да се определи редът на изпълнение на фрагментите в кода, трябва да се анализира структурата на програмата и да се вземат предвид всички оператори за контрол на програмния поток.


9.Създаването на програми включва следните основни стъпки:
Поставяне на проблема - Необходимо е да се разбере задачата, която програмата трябва да реши. Трябва да се определи входната информация и очаквания изход.
Проектиране на програмата - След като е разбран проблема, следва проектиране на програмата, която ще го реши. Трябва да се определят структурата и архитектурата на програмата.
Кодиране - След проектирането на програмата трябва да започнем да пишем кода. Трябва да се използва синтаксисът на избрания програмен език и да се следват добрите практики на програмирането.
Тестване - След като е написан кодът, следва тестване на програмата. Тестовете трябва да покриват всички възможни случаи на входните данни и да проверят дали програмата работи коректно.
Отстраняване на грешки - При тестването може да се открият грешки в програмата, които трябва да бъдат отстранени.
Документиране на програмата - Приключването на програмата трябва да се направи документация на кода, за да може да бъде поддържан и разбиран от други програмисти в бъдеще.
Поправката или допълването на вече съществуващи програми може да включва следните стъпки:
Анализ на кода - Трябва да се анализира вече съществуващият код, за да се разбере проблема или да се определи мястото, където да се направят допълнения.
Добавяне на нов код - След като е разбран проблема, може да се напише нов код, за да се добавят необходимите функционалности.
Тестване - След добавянето на новия код трябва