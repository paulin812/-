Функционално програмиране

1.Функционалната парадигма на програмиране е начин за проектиране и програмиране на софтуер, който се фокусира върху функции като основна конструкция. В тази парадигма програмите са конструирани от множество от функции, които получават аргументи и връщат резултати. Функционалната парадигма се базира на математическата теория на функциите, която е доказала, че функциите могат да бъдат използвани като абстрактни блокове за изграждане на комплексни системи.
Основните принципи на функционалната парадигма включват:
Неизменяемост (immutability): Функционалните програми са проектирани така, че данните са неизменяеми, което означава, че един път създадени, те не могат да бъдат променяни. Вместо това, функциите създават нови данни въз основа на старите, което осигурява безопасност и надеждност на програмите.
Рекурсия (recursion): Рекурсията е често използван метод в функционалната парадигма за решаване на проблеми. Тя се използва когато функцията се извиква сама със себе си, като когато се извика за първи път, тя обикновено има допълнителен параметър за задаване на началната стойност.
Високоредово програмиране (higher-order programming): Високоредовото програмиране позволява използването на функции като аргументи на други функции или като резултат от тях. Това позволява на програмата да бъде по-абстрактна и да се състои от по-малки, по-прости функции.
Функции от по-висок ред (higher-order functions): Функциите от по-висок ред са такива функции, които приемат други функции като аргументи и/или връщат функции като резултат. Това позволява на програмата да се компактно изрази, като се използват функции, които могат да се комбинират, за да се постигне по-голяма функционалност.

2.В програмирането терминът "странични ефекти" (side effects) се използва за да се опишат промените, които програмата прави върху средата си извън обхвата на връщането на стойности от функции. Това могат да бъдат промени на стойности на променливи, извеждане на изход на екрана, записване на файл, изпращане на мрежова заявка и т.н.
Страничните ефекти могат да бъдат нежелани, тъй като те могат да променят състоянието на програмата и да водят до неочаквани резултати или грешки. Затова в функционалното програмиране, където се стреми към използване на чисти функции без странични ефекти, се използват механизми като имутабилност (непроменяемост на стойностите), чисти функции (които не правят странични ефекти) и монади (за да се управляват страничните ефекти в изчистен и контролируем начин).

3.Входно/изходни операции (I/O) са операции, които позволяват на програмата да взаимодейства с външния свят, като получава входни данни и изпраща изходни данни. Това може да включва четене на данни от файл, клавиатура или мрежа, както и запис на данни във файл, извеждане на данни на екрана или изпращане на данни по мрежата.
"Състоянието" на програмата се отнася до текущото състояние на променливите в програмата. Когато програмата изпълнява инструкция, тя може да променя състоянието на една или повече променливи в програмата. Тези промени на състоянието могат да бъдат запазени и ползвани от програмата по-късно в изпълнението ѝ. Състоянието на програмата може да се променя и от външни фактори, като например входни данни от потребителя.

4.В програмирането функциите са използвани за групиране на код в отделни блокове, които могат да бъдат извикани при нужда. Функциите приемат входни параметри, извършват някакви действия и връщат резултат.
Рекурсията е техника, при която функцията извиква сама себе си, за да реши по-малки версии на проблема, докато не достигне базовия случай, когато да се върне резултат.
Функциите и рекурсията са мощни инструменти в програмирането, които могат да улеснят решаването на сложни проблеми и да намалят дублирането на код.

5.Чистите функции са функции в функционалното програмиране, които имат две основни характеристики:
Връщат резултат, който зависи само от техните входни параметри.
Не променят състоянието на програмата, като например не мутират глобални променливи или извършват входно/изходни операции.
Това прави чистите функции лесни за тестване и поддръжка, защото те винаги ще връщат един и същ резултат за даден набор от входни параметри. Освен това, чистите функции са декларативни и декларативното програмиране е по-лесно за разбиране и поддръжка.

6.Работата със списъци е важна част от функционалната програмиране. Във функционалното програмиране списъците могат да се използват за съхранение на данни и за работа с тях.
Във функционалното програмиране има два начина за представяне на списъци: "глава" и "опашка" (head-tail). При този начин на представяне списъкът се състои от първия елемент (главата) и остатъка (опашката) на списъка.
При работа с функции върху списъци може да се използва "глава" и "опашка" за обхождане и манипулиране на списъците. Например, за обхождане на списък може да се използва рекурсивна функция, която обхожда списъка елемент по елемент, като използва "глава" и "опашка" за преминаване от елемент на елемент.
Глава" и "опашка" са две понятия, свързани с работата със списъци в функционалното програмиране.
"Глава" на списъка е първият елемент в списъка, който може да бъде достъпен чрез функции като car или head. Това е елементът, който се намира на първата позиция на списъка.
"Опашка" на списъка е всичко останало след "главата" на списъка. То може да бъде достъпено чрез функции като cdr или tail. Това е списъкът, който остава, когато първият елемент е премахнат.
Разликата между "главата" и "опашката" на списъка е, че "главата" е само един елемент, докато "опашката" е списък от оставащите елементи. Важно е да се отбележи, че в някои езици за програмиране (като Scheme), "опашката" се нарича "cdr", което е абревиатура от "конс даун", което се отнася до втория елемент в "конс клетка", която е основната структура на списъците в тези езици.