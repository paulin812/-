Бази данни

1.База данни е структурирана колекция от данни, които се съхраняват и управляват на компютър, така че да могат да бъдат лесно достъпвани, управлявани и обработвани от потребителите на системата.
Типовете данни, които могат да бъдат съхранявани в база данни, са:
Числови типове - те включват цели числа, дробни числа, реални числа, числа с плаваща запетая, десетични числа и други.
Символни типове - те включват знаци, символни низове и други.
Дата и време типове - те включват дата, време, дата и време в комбинация и други.
Логически типове - те могат да бъдат само истина или лъжа.
Бинарни типове - те се използват за съхранение на бинарни данни, като например изображения, звукови файлове, видеоклипове и други.
Други типове - те включват енумерации, списъци, масиви и други специални типове, които са специфични за определени програмни езици или бази данни.
2.За да създадем таблица в базата данни, можем да използваме SQL заявка. Ето пример как да създадем таблица "users" с три полета: "id", "username" и "password":
CREATE TABLE users (
  id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  password VARCHAR(50) NOT NULL
);
Тази заявка създава таблица "users" с три колони: "id", "username" и "password". Първата колона е от тип INT и ще бъде използвана като PRIMARY KEY. Втората и третата колона са от тип VARCHAR с дължина на символите до 50 и не могат да бъдат празни (NOT NULL).
За да променим таблица в базата данни, можем да използваме SQL заявка ALTER TABLE. Ето пример как да променим таблицата "users", като добавим нова колона "email":
ALTER TABLE users ADD COLUMN email VARCHAR(50) NOT NULL;
Тази заявка добавя нова колона "email" към таблицата "users", като колоната не може да бъде празна (NOT NULL).
За да изтрием таблица от базата данни, можем да използваме SQL заявка DROP TABLE. Ето пример как да изтрием таблицата "users":
DROP TABLE users;
Тази заявка изтрива таблицата "users" от базата данни. Важно е да отбележим, че това действие е необратимо и ще изтрие всички данни в таблицата.ю
3.ормализацията в контекста на базите данни е процесът на организиране на данните в таблици, за да се избегне дублирането на данни и други аномалии при работа с тях. Целта е да се постигне по-ефективна работа с данните и да се осигури по-голяма яснота и консистентност на информацията.
Съществуват няколко нормални форми, като всяка следваща нормална форма се постига чрез допълнителни правила за организиране на данните.
Първа нормална форма (1NF) - всеки атрибут в таблицата трябва да бъде атомарен (неделим).
Втора нормална форма (2NF) - всички не-ключови атрибути в таблицата трябва да зависят от целия ключ, а не само от част от него.
Трета нормална форма (3NF) - не трябва да има транзитивни зависимости между не-ключови атрибути.
Бойс-Код (BCNF) - няма да влизаме в подробности, но това е по-стриктна форма на 3NF, която разглежда допълнителни видове зависимости между атрибутите.
Нормализацията може да помогне за подобряване на съхранението и манипулацията на данните в базата данни, като гарантира, че информацията е консистентна и лесно достъпна.
4.В релационните бази данни се използват различни типове връзки между таблиците, като това са:
Едно към едно (One-to-One) връзка: Този тип връзка се използва когато всеки запис в една таблица е свързан точно с един запис в друга таблица. Този тип връзка се осъществява чрез включване на чужд ключ на едната таблица като ключ на другата таблица.
Едно към много (One-to-Many) връзка: Този тип връзка се използва когато всеки запис в една таблица е свързан с много записи в друга таблица. Този тип връзка се осъществява чрез включване на чужд ключ на много записи в друга таблица като ключ на първата таблица.
Много към много (Many-to-Many) връзка: Този тип връзка се използва когато множество записи в една таблица са свързани с множество записи в друга таблица. Този тип връзка се реализира чрез използване на допълнителна таблица, която съдържа ключове от двата типа записи, които са свързани.
Самореферентна (Self-referencing) връзка: Този тип връзка се използва когато записите в една таблица са свързани с други записи в същата таблица. Това може да се използва, например, за свързване на родителски и децки елементи в дървовидна структура.
За да бъде успешна базата данни, е важно да се разберат и да се използват правилно всички типове връзки.
5.Каскадните операции в релационните бази данни са действия, които се извършват автоматично върху дефинираните връзки между таблиците при извършване на определени операции (INSERT, UPDATE, DELETE). Различните каскадни операции се използват за задаване на правила за автоматично изпълнение на действия при промени на данните в една таблица, които засягат други свързани таблица.
Каскадно ъпдейтване (CASCADE UPDATE): Тази операция се изпълнява при промяна на стойностите на поле, което е свързано с друго поле в друга таблица чрез външен ключ. Като резултат, всички записи във втората таблица, които са свързани с променения запис в първата таблица, също ще бъдат ъпдейтнати
Каскадно изтриване (CASCADE DELETE): При изтриване на запис от първата таблица, всички свързани записи в другата таблица ще бъдат автоматично изтрити.
Set Null: При изтриване на запис от първата таблица, всички свързани записи в другата таблица ще бъдат обновени и вместо да сочат към изтрития запис, ще бъдат променени така, че да сочат към NULL.
Set Default: При изтриване на запис от първата таблица, всички свързани записи в другата таблица ще бъдат обновени и вместо да сочат към изтрития запис, ще бъдат променени така, че да сочат към стойността на дефинирано по подразбиране поле.
Каскадните операции се използват за защита на цялостта на данните и са особено полезни при работа с големи и сложни бази данни, където е необходимо да се гарантира консистентността на информацията.
6. В контекста на релационните бази данни, ограниченията (constraints) са правила, които се прилагат върху данните, съхранявани в таблиците, за да ги направят по-структурирани и да гарантират правилното им функциониране. Ограниченията могат да бъдат наложени върху единични полета или върху цялата таблица.
Ето някои от най-често използваните ограничения:
Primary key constraint (ограничение на основен ключ) - това е ограничение, което гарантира уникалността на стойностите в едно или няколко полета от таблицата. Primary key constraint може да бъде наложен върху едно или няколко полета, като обикновено се използва на поле, което съдържа уникална идентификационна информация за записа. Пример за това може да бъде поле "id" в таблицата с потребители.
Foreign key constraint (ограничение на външен ключ) - това е ограничение, което позволява свързването между две таблиците, като основната таблица има един основен ключ, който се състои от едно или няколко полета, а вторичната таблица съдържа един или няколко полета, които са свързани с основния ключ. Това ограничение гарантира, че данните, свързани с външния ключ, съществуват в основната таблица. Пример за това може да бъде таблицата "orders", която има външен ключ към таблицата "customers".
Check constraint (ограничение за проверка) - това е ограничение, което проверява дали стойността на дадено поле отговаря на определени критерии. Това ограничение може да бъде наложено върху едно или няколко полета, като може да се използва за проверка на валидността на данните, съхранявани в таблицата. Например, може да се използва за проверка дали датата на поръчката е след датата на регистрация на потребителя.
Unique constraint (ограничение на уникалност) - това е огранич
7.SQL езикът е език за управление на релационни бази данни. CRUD е акроним, който описва основните операции в SQL езика – Create, Read, Update и Delete.
CREATE: използва се за създаване на нови записи в таблицата.
READ: използва се за четене на записи от таблицата.
UPDATE: използва се за промяна на записи в таблицата.
DELETE: използва се за изтриване на записи от таблицата.
При изпълнение на SQL заявките е важно да се следят ограниченията и връзките между таблиците, за да се избегнат грешки и неконсистентни данни.
8.В SQL можем да създаваме подзаявки, които са заявки в рамките на друга заявка. Това ни позволява да правим по-сложни заявки, като използваме резултатите от друга заявка като временна таблица.
Една проста подзаявка може да изглежда така:
SELECT column_name(s)
FROM table_name
WHERE column_name IN (SELECT column_name FROM table_name WHERE condition);
В горния пример, подзаявката е изразът между скобите. Тя избира всички стойности на column_name, където условието е изпълнено, от таблицата table_name, и тези стойности се използват като условие във външната заявка.
Подзаявките могат да бъдат включени в други заявки, като SELECT, INSERT, UPDATE и DELETE, което дава много гъвкавост и функционалност в работата с бази данни.
9.Обединението и съединението на данни са две различни операции в SQL за комбиниране на информация от две или повече таблици.
Обединението на данни (UNION) се използва за съединяване на две или повече множества от резултати на SELECT заявки. Резултатът от обединението на две множества е ново множество, което включва всички уникални редове от всяко от множествата. 
Съединението на данни (JOIN) се използва за съединяване на редове от две или повече таблиц. Съединението се извършва по определени колони от двата източника, които са еквивалентни помежду си. Резултатът от съединението на две таблиците е нова таблица, която съдържа данните от двата източника, където условието за съединение е изпълнено.
Има няколко вида на съединенията - INNER JOIN (връща само редове, които имат съответстващи стойности в двете таблица), LEFT JOIN (връща всички редове от първата таблица и съответните редове от втората таблица) и RIGHT JOIN (връща всички редове от втората таблица и съответните редове от първата таблица).
10.Групирането на данни е процесът на разделяне на редовете в таблица в групи, въз основа на стойностите в определено поле. За да групираме данни, използваме оператора GROUP BY в SQL заявките.
Филтрирането на данни е процесът на извличане на само определени редове от таблица, които отговарят на определени критерии. За да филтрираме данни, използваме оператора WHERE в SQL заявките.
Сортирането на данни е процесът на подреждане на редовете в таблица в определен ред, въз основа на стойностите в определено поле. За да сортираме данни, използваме оператора ORDER BY в SQL заявките.
11.В контекста на базите данни, функциите, съхранените процедури и транзакциите са различни концепции, които имат свои уникални характеристики и функционалности.
Функциите са блокове от код, които могат да приемат параметри и да връщат резултат. Те могат да се използват в SQL заявки за изчисляване на стойности, които да се използват в други части от заявката. Функциите могат да бъдат скаларни, когато връщат една стойност, или таблични, когато връщат табличен резултат.
Съхранените процедури са групи от SQL заявки, които могат да се изпълняват повторно при нужда. Те могат да приемат параметри и да връщат резултат, но най-често се използват за изпълнение на последователност от операции, която трябва да се изпълни отново и отново.
Транзакциите са механизми за управление на операции, които могат да бъдат извършвани върху базата данни. Те осигуряват сигурност и цялостност на данните, като гарантират, че ако операцията не може да бъде извършена успешно, тогава няма да бъде извършена въобще.
В общи линии, функциите и съхранените процедури са инструменти за обработка на данни, докато транзакциите са механизми за управление на транзакциите в базата данни. Всички три концепции са важни за разработването на сигурни и ефективни бази данни.