Обектно-ориентирано програмиране

1.Концепцията за типизиране на класове чрез шаблонни класове и методи в C# се изразява чрез ключовата дума generic. 
Шаблонните класове и методи позволяват да се дефинират класове и методи, които могат да работят с различни типове данни, без да се изисква повторно писане на код.
Концепцията за типизиране на класове чрез шаблонни класове и методи в C# се базира на използването на генерични типове. Генеричните типове позволяват създаването на класове и методи, които могат да приемат аргументи от различни типове, без да се налага да се създават отделни класове или методи за всеки тип.
За да създадете генеричен клас в C#, трябва да използвате синтаксиса на шаблонния клас

2.Наследяването на класове е концепция в обектно-ориентираното програмиране, която позволява на един клас (наследник) да наследи свойства и методи от друг клас (родител). Това позволява да се създават йерархии от класове, където по-специализирани класове наследяват общи свойства и методи от по-общи класове.
В C# наследяването се извършва чрез ключовата дума class, като се използва двоеточието : за да се посочи родителският клас.Наследяването на класове е механизъм в обектно-ориентираното програмиране, който позволява на клас да наследява свойства и методи от друг клас, който се нарича "родителски" или "базов" клас. 
Класът, който наследява свойствата и методите на друг клас, се нарича "детски" или "производен" клас.
Когато един клас наследява друг клас, той получава всички свойства и методи, дефинирани в родителския клас, като може да добавя допълнителна функционалност или да променя поведението на методите, в зависимост от нуждите на програмата.
При работа с наследени класове, детският клас може да използва свойства и методи, дефинирани в базовия клас, като използва ключовата дума "base" за да се обръща към тези свойства и методи.

3.Презаписването (override) и презареждането (overloading) са две основни концепции в обектно-ориентираното програмиране, свързани с методите в класовете.
Презаписването на метод се използва, когато искаме да променим поведението на метод, който е вече дефиниран в класа, от който наследяваме. Това означава, че методът в дъщерния клас ще има същото име, същите параметри и същия тип на връщане, но с различна реализация. За да постигнем това, трябва да използваме ключовата дума "override" преди декларацията на метода в дъщерния клас.
Презареждането на метод се използва, когато искаме да имаме метод с едно и също име, но различни параметри. Това означава, че в родителския клас имаме един метод с определени параметри, а в дъщерния клас имаме друг метод с различни параметри, но със същото име. Това се постига като декларираме метода с едно и също име, но различни параметри.

4.Абстракцията и интерфейсите са важни концепции в ООП, които ни позволяват да създаваме по-абстрактни и модулни приложения.
Абстракцията е процесът на извличане на общи характеристики на различни обекти и създаване на абстрактен клас, който да ги обедини. Това ни позволява да създадем обобщения, които да се използват в различни контексти и да имаме по-голяма гъвкавост в дизайна на приложението. Абстрактният клас е клас, който не може да бъде инстанцииран и има поне един абстрактен метод, който трябва да бъде презаписан от наследниците му.
Интерфейсът е специален вид абстрактен клас, който се използва за дефиниране на общи характеристики на класовете, които го имплементират. Интерфейсите са абстрактни и не могат да бъдат инстанциирани, а само да бъдат имплементирани от класовете. Това гарантира, че класовете имат определени методи и свойства, които можем да използваме в приложението, независимо от техния конкретен тип.
Разликите между абстрактните класове и интерфейсите са в това, че абстрактните класове могат да имат както абстрактни методи, така и конкретни методи и свойства, които могат да бъдат наследени от наследниците му. Интерфейсите не могат да имат конкретни реализации, само дефиниции на методи и свойства.
Абстрактните класове и интерфейсите ни позволяват да прилагаме принципа на полиморфизма и да работим с различни обекти като използваме общ интерфейс. Това ни позволява да имаме по-голяма гъвкавост и да създаваме приложения, които могат да се справят с променлив брой обекти и ситуации.

5.Полиморфизмът е понятие в програмирането, което се отнася до възможността на обект да приема множество форми. В контекста на обектно-ориентираното програмиране, това означава, че обект от определен клас може да бъде използван като обект от друг клас, който е негов наследник.
Видовете полиморфизъм включват:
Ранно свързване (early binding) - това е полиморфизъмът, който се случва по време на компилацията. Той се реализира чрез използването на функции и методи с еднакви имена и параметри във всички класове на йерархията.
Късно свързване (late binding) - това е полиморфизъмът, който се случва по време на изпълнението. Той се реализира чрез използването на виртуални методи и функции в базовия клас, които могат да бъдат презаписани от наследниците.
Параметричен полиморфизъм (parametric polymorphism) - това е полиморфизъмът, който позволява създаването на обобщени функции и методи, които могат да работят с различни типове данни.
Наследствен полиморфизъм (inheritance polymorphism) - това е полиморфизъмът, който се основава на наследяването на свойства и методи от един клас към друг.
Преобразуване на типове (type casting) - това е полиморфизъмът, който позволява обекти да бъдат преобразувани от един тип към друг.

6.Обектно-ориентираното програмиране (ООП) е методология за програмиране, която използва обекти като основни елементи за изграждане на програмни системи. ООП се базира на три основни принципа: инкапсулация, наследяване и полиморфизъм. Тези принципи са основният инструментариум, който позволява на програмистите да изградят по-големи и по-сложни програмни системи.
Принцип на инкапсулацията означава, че данните и функциите, които работят с тях, са събрани в една единица - клас. Това означава, че данните са скрити от външния свят и могат да бъдат манипулирани само чрез функции, които са дефинирани в класа.
Принципът на наследяването позволява да се създават нови класове, които наследяват свойствата и методите на вече съществуващи класове. Това позволява да се избегне дублирането на код и да се улесни промяната на функционалността.
Принципът на полиморфизма позволява на една и съща функция да се използва за обработка на различни типове данни. Това се постига чрез използването на виртуални функции и наследяването.
Пример за приложение на принципите на ООП може да бъде системата за управление на банкови сметки. Тази система съдържа класове като "Клиент", "Сметка", "Транзакция" и т.н. Всеки от тези класове съдържа данни и функции, които са свързани с тяхната функционалност. 
Например, класът "Клиент" съдържа данни като име, адрес, телефонен номер и функции като добавяне на нов клиент и търсене на клиент по име. Класът "Сметка" съдържа данни като номер на сметка, баланс и функции като добавяне на нова сметка, внасяне на пари и теглене на пари. 

7.Създаването и поправката/допълването на вече съществуващи компютърни програми, описващи обекти от реалния свят, изисква знания и умения в обектно-ориентираното програмиране и конкретни програмни езици.
При създаването на нова програма, която да описва обекти от реалния свят, трябва да се определят класовете, които ще бъдат използвани за описание на тези обекти. Класовете трябва да бъдат добре структурирани, да имат четки и ясни интерфейси и да отговарят на принципите на обектно-ориентираното програмиране.
При поправката/допълването на вече съществуващи програми, описващи обекти от реалния свят, може да се наложи да се променят или допълнят вече съществуващите класове или да се създадат нови. Важно е при тези промени да се спазват добрите практики на обектно-ориентираното програмиране, да се запазят връзките и взаимодействията между класовете и да се избягват нарушенията на инкапсулацията.
Пример за създаване на програма, описваща обекти от реалния свят, може да бъде програма за управление на банкова сметка. В тази програма ще имаме клас "Банкова сметка", който ще описва свойствата на банковата сметка (например номер на сметка, баланс, фамилия на собственика и т.н.) и методи за работа с нея (например внасяне на пари, теглене на пари, проверка на баланса и т.н.).
Пример за поправка/допълване на вече съществуваща програма, описваща обекти от реалния свят, може да бъде програма за управление на лекарства в аптека. В тази програма може да се наложи да се променят вече съществуващите класове