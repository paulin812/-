1.Конкурентност е свойство на система или програма, при което няколко процеса или нишки могат да изпълняват едновременно и да конкурират за достъп до ресурси.

Процес е програмен код, който се изпълнява в операционната система, и може да има свой собствен адресен пространство, състояние, средства за вход и изход, като например файлове и мрежови връзки.

Блокираща операция е операция в програмен код, при която програмата спира изпълнението си и чака за завършване на някаква външна операция, като например вход/изход към файлове или мрежови връзки.

Нишка (или thread) е лек процес, който може да се изпълнява едновременно с други нишки в рамките на един процес и да споделя ресурси като памет и файлови дескриптори с другите нишки в процеса.

2.Блокиращи операции са операции, които блокират изпълнението на програмата до завършването на тяхното изпълнение. Примери за блокиращи операции са:

Четене от файлове: Ако програмата трябва да прочете информация от файл, тя трябва да изчака завършването на операцията на дисковото устройство, което може да отнеме време, особено ако файлът е голям.

Изчакване на потребителски вход: Ако програмата очаква потребителски вход, тя може да блокира изпълнението си, докато потребителят не въведе необходимата информация.

Мрежови операции: Ако програмата извършва мрежови операции като изпращане на заявки към други компютри по мрежата, тя може да блокира изпълнението си, докато чака за отговор от другия компютър.

3.Работата с нишки (threads) и асинхронни операции (asynchronous operations) може да предизвика някои проблеми, които трябва да се има предвид.

Един от основните проблеми е усложняването на програмната логика. Когато се работи с нишки, програмистът трябва да внимава да синхронизира достъпа до споделени ресурси, за да се избегне грешките при паралелната работа. Също така, асинхронният код може да изглежда много сложен, особено когато трябва да се работи с много различни събития.

Друг проблем е увеличаването на сложността на откриване на грешки. Някои грешки могат да се появят само при конкретни условия или при конкретен ред на изпълнение на нишките, което може да затрудни откриването и отстраняването на проблема.

Решенията на тези проблеми включват правилното синхронизиране на достъпа до споделени ресурси, използване на подходящи алгоритми и структури данни, както и проследяване на изпълнението на кода чрез дебъгери и лог файлове. Освен това, може да се използват модули и библиотеки, които автоматично обработват множеството от проблеми, свързани с нишките и асинхронните операции, например asyncio в Python или async/await в C#.

4.Процесът е програма, която се изпълнява в операционната система и има собствено пространство от памет и ресурси. Всяка нишка е лек процес, който работи в рамките на главния процес.

Нишките споделят същото пространство от памет и ресурси като главния процес и могат да комуникират с други нишки в рамките на процеса. Това ги прави по-ефективни отколкото процесите, които трябва да се комуникират чрез специализирани механизми за междупроцесна комуникация (IPC).

Сравнението между процес и нишка може да бъде направено по следните критерии:

Памет: Всяка нишка споделя същата памет като главния процес, докато всеки процес има свое собствено пространство от памет.

Комуникация и синхронизация: Комуникацията и синхронизацията между нишките е по-лесна, тъй като те споделят същата памет. В случай на процеси трябва да се използва специализирана механизма за междупроцесна комуникация (IPC).

Пораждащ процес: Нишките са пораждани от главния процес, докато процесите могат да бъдат пораждани от операционната система или от друг процес.

Защита: В случай на грешка в една нишка, това може да повлияе на целия процес. В случай на процеси, ако един процес се срине, другите процеси няма да бъдат засегнати.

В общи линии, нишките са по-ефективни от процесите при решаване на проблеми, свързани с мултизадачност и комуникация между компонентите на една програма.

5.Разработването на многонишкови приложения е важна част от софтуерното инженерство. В едно многонишково приложение, нишките работят едновременно, като всяка нишка има свой собствен контекст на изпълнение. Това дава възможност за по-ефективно използване на ресурсите на системата и подобрява отзивчивостта на приложението.
След като сме създали нишките, ние ги стартираме чрез метода start(). След това, ние изчакваме нишките да приключат чрез метода join(), който блокира основната нишка докато всички създадени нишки не завършат изпълнението си.

В крайна сметка, когато всички нишки приключат изпълнението си, ще се изпринти съобщението Done!.

Това е прост пример за създаване и управление на нишки в Python, но има много други начини за работа с многонишковостта в Python, включително използване на модули като concurrent.futures и asyncio.

6.Синхронизацията между нишки е важен аспект от многонишковото програмиране. Тя позволява на нишките да работят заедно в синхронизиран начин, без да се налага да се блокират или да се конфликтуват при достъп до споделени ресурси.

Ето някои от начините за синхронизация между нишки:

Locks (като мутекси) - това са механизми за синхронизация, които предоставят монопол на нишката върху даден ресурс. Всяка нишка може да заключи (acquire) мутекса преди да го използва и да го отключи (release) след като е завършила работа с него. Това осигурява едновременен достъп на само една нишка до даден ресурс, като другите нишки са блокирани, докато мутексът не бъде освободен.

Semaphores - това са механизми за синхронизация, които ограничават броя на нишките, които могат да достъпват даден ресурс едновременно. Всяка нишка може да заяви (acquire) семафора преди да достъпи ресурса и да го освободи (release) след като е завършила работа с него. Това позволява на няколко нишки да достъпят даден ресурс едновременно, но не повече от даден брой.

Events - това са механизми за синхронизация, които позволяват на нишките да чакат докато определено събитие се случи. Всяка нишка може да изчака (wait) събитието да се случи, преди да продължи изпълнението си. Друга нишка може да промени състоянието на събитието (set), което ще разбуди всички нишки, които чакат за него.

Condition variables - това са механизми за синхронизация, които позволяват на нишките да чакат за дадено условие да бъде изпълнено преди да продължат изпълнението си. Всяка нишка може да изчака (wait)

7.Асинхронните операции са начин за изпълнение на задачи в една програма, където няколко операции могат да се изпълняват паралелно, без да блокират главния нишков процес.

При асинхронните операции, задачите се изпълняват в специален режим, наречен асинхронен режим, който позволява на процесора да изпълнява други задачи, докато текущата задача чака да завърши операцията. Така програмата може да продължи да работи, докато се изчаква завършването на по-бавните операции, без да блокира изпълнението на главния процес.

В асинхронния режим, операциите се изпълняват с помощта на така наречените callback функции (функции обратно извикване), които се извикват автоматично, когато операцията завърши. Callback функциите могат да съдържат логиката, която трябва да бъде изпълнена, когато операцията завърши, като например обработка на данни, записване във файл и други.

Пример за асинхронна операция е изпращането на заявка към интернет сървър. Тъй като отговорът може да отнеме известно време за получаване, вместо да се блокира програмата за изчакване на отговора, може да се използва асинхронен режим на работа, като се изпрати заявката и програмата продължи да работи, докато отговорът не бъде получен. Когато отговорът бъде получен, ще се извика callback функцията, която ще обработи отговора. Това позволява на програмата да работи по-ефективно и да изпълнява множество задачи паралелно.

8.Обещание (Promise) е концепция в програмирането, която се използва за управление на асинхронни операции. Обещанието представлява представяне на стойност, която може да бъде върната от асинхронна операция в бъдеще, когато операцията приключи. Обещанието може да бъде използвано за представяне на успешно изпълнение или грешка при изпълнението на операцията.

Обещанията позволяват на програмистите да управляват асинхронни операции по-лесно, като предоставят синтактичен захват на изпълнението на асинхронни функции. С помощта на методите .then() и .catch() на обещанията, програмистите могат да обработват успешното завършване или грешката при изпълнението на операцията.

Обратното извикване (callback) е функция, която се подава като аргумент на друга функция и се използва за изпълнение на код в бъдеще, когато операцията, в която се извиква функцията, приключи. Обратното извикване се използва за управление на асинхронни операции, като например изпращане на заявки към интернет сървъри, четене на файлове и други.

При използването на обратното извикване, функцията, която извиква другата функция с обратно извикване, продължава да работи, докато не получи отговор от функцията с обратно извикване. Когато функцията с обратно извикване приключи операцията, тя извиква функцията, която я е извикала, като предава резултатът от операцията като аргумент на обратното извикване. Това позволява на програмистите да управляват асинхронни операции и да извършват действия във функции, когато операцията приключи.

9.Една от най-често срещаните асинхронни операции в програмирането е извличането на данни от уеб сървъри. За да демонстрираме асинхронна операция, ще използваме JavaScript и ще направим заявка към API на GitHub, за да получим информация за репозитории на даден потребител.

За да извършим тази асинхронна операция, ще използваме fetch() метода, който изпраща заявка към уеб сървър и връща обещание (Promise) за резултата. Ще използваме метода .then(), за да обработим успешния резултат от операцията и метода .catch(), за да обработим грешки.