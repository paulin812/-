1.
Алчният алгоритъм е метод за решаване на проблеми, който използва локални решения, за да постигне глобално оптимално решение. Това означава, че алгоритмът взема решения въз основа на най-доброто възможно решение, налично в текущия момент, без да се интересува от възможни последствия в бъдеще.

Примери за задачи, които могат да бъдат решени с помощта на алчни алгоритми, включват:

Задача за раницата - задача, която изисква избор на предмети с определени тегла и стойности, така че общото тегло да не надвишава капацитета на раницата, а общата стойност да бъде максимална.

Задача за покриване на интервали - задача, която изисква избор на най-малък брой интервали, които да покриват даден набор от точки.

Задача за пътешественика - задача, която изисква намиране на най-краткия път за посетяване на даден набор от градове.

Алчният алгоритъм може да бъде решаван с помощта на следните стъпки:

Изберете началната точка или решение.

Изберете локално оптимално решение, което да бъде добавено към текущото решение.

Обновете текущото решение, като добавите локалното оптимално решение.
2.
Рекурсията е техника за решаване на проблеми, която се основава на повторното извикване на себе си с по-малки подзадачи, докато се стигне до базов случай, който да спре рекурсията. Рекурсията е много полезна техника в програмирането, тъй като позволява елегантно и лесно решаване на сложни задачи.

Примери за рекурсивни алгоритми включват:

Факториел: Рекурсивният алгоритъм за намиране на факториела на дадено число се основава на следното рекурсивно изразяване: n! = n * (n-1)!, където 0! и 1! имат стойност 1.

Бинарно търсене: Рекурсивният алгоритъм за бинарно търсене на даден елемент в сортиран масив се основава на сравняване на средния елемент на масива с търсения елемент. Ако търсеният елемент е по-малък от средния елемент, търсенето продължава вляво от средата, в противен случай търсенето продължава вдясно от средата. Процесът се повтаря, докато се намери търсеният елемент или се стигне до края на масива.

Фибоначи: Рекурсивният алгоритъм за намиране на числата на Фибоначи се основава на следното рекурсивно изразяване: F(n) = F(n-1) + F(n-2), където F(0) = 0 и F(1) = 1.

Алгоритмите по схемата на пълното изчерпване (backtracking) са друга техника за решаване на задачи, която използва рекурсия. Тези алгоритми са полезни, когато трябва да се намери всички възможни решения на дадена задача. Примери за задачи, които могат да бъдат решени чрез алгоритми по схемата на пълното изчерпване, включват: намиране на всички пермутации на даден масив, намиране на всички възможни пътища
3.Комбинаториката е област на математиката, която се занимава с броенето на комбинаторни обекти като вариации, комбинации и пермутации.

Вариации: Вариациите са комбинации от елементи, където редът има значение. Например, ако имаме 3 числа: 1, 2 и 3, всички възможни вариации от по 2 числа са: 12, 13, 21, 23, 31 и 32. Формулата за броя на вариациите от n елемента по k на елемента е: V(n, k) = n!/(n-k)!

Комбинации: Комбинациите са комбинации от елементи, където редът не има значение. Например, ако имаме същите 3 числа: 1, 2 и 3, всички възможни комбинации от по 2 числа са: 12, 13 и 23. Формулата за броя на комбинациите от n елемента по k на елемента е: C(n, k) = n!/k!(n-k)!

Пермутации: Пермутациите са комбинации от елементи, където редът има значение и всички елементи са различни. Например, ако имаме 3 числа: 1, 2 и 3, всички възможни пермутации на тези числа са: 123, 132, 213, 231, 312 и 321. Формулата за броя на пермутациите от n елемента е: P(n) = n!.

За генерирането на комбинаторни съединения се използват различни алгоритми като:

Рекурсивен алгоритъм: Избират се по един елемент и се генерират всички комбинации от останалите елементи, докато се достигне желаната дължина на комбинацията.

Алгоритъм на Лексикографска пермутация: По дадена пермутация се генерира следващата пермутация в лексикографски ред, като се разменят елементите в последователност, която отговаря на най-голямата ненамаляваща подпоследователност в пермутацията.

Алгоритъм на Комбинации от елементи: Използва се масив от маркери, който показва дали елементите в комбинацията
4.
Обхождането на граф е една от основните задачи при работа с графи. То ни позволява да обходим всички възли и ребра в графа, като при това можем да използваме различни стратегии за обхождане, в зависимост от конкретната задача. В тази статия ще разгледаме някои от най-използваните алгоритми за обхождане на графи и ще дадем примерни имплементации на програмен код.

Графично представяне на алгоритмите:

DFS (Depth-First Search) - алгоритъм за обхождане на граф в дълбочина

При DFS обхождане на графа, започваме от един връх (някакъв "корен") и обхождаме всички негови съседи, след това продължаваме със следващия съсед и така нататък, до края на върховете, които могат да се достигнат от началния връх.

Графично представяне на DFS:

Алгоритъм на Дейкстра:
Алгоритъмът на Дейкстра е алгоритъм за намиране на най-късия път между две върха в ориентиран граф с неотрицателни тегла на ребрата. Идеята на алгоритъма е да се поддържа списък от върхове, за които е намерена най-кратката дистанция от началния връх, и да се избере най-малката дистанция от този списък като следващата връх за обработка.