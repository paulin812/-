1.Мрежови протоколи (IP, TCP, UDP) - са ключови компоненти на Интернет протоколната стек. Тези протоколи се използват за прехвърляне на данни между компютри в мрежата, като осигуряват надеждност, цялостност и доставка на данните в различни условия.

IP (Internet Protocol) е базовият протокол на Интернет. Той е отговорен за адресирането и пренасянето на данни между различни мрежи. IP позволява на данните да бъдат разпределени и маршрутизирани по най-ефективния начин до своята крайна цел.

TCP (Transmission Control Protocol) е протокол, който осигурява надеждна връзка за прехвърляне на данни между два компютъра в мрежата. Той използва механизми за потвърждение и повторно изпращане на загубени пакети, за да гарантира, че данните са доставени без грешки и в правилния ред.

UDP (User Datagram Protocol) е протокол за транспортиране на данни, който не осигурява надеждна връзка. Той изпраща данни без гарантиране на доставката им и без потвърждение за получаването им. UDP е често използван за приложения, където скоростта е от ключово значение, като например при стрийминг на видео и аудио.

В комбинацията IP, TCP и UDP предоставят основата на Интернет комуникацията и са използвани за почти всички видове мрежови комуникации, включително уеб браузъри, електронна поща, файлово споделяне, видео и аудио стрийминг, онлайн игри и др.

2.Видове HTTP заявки -
GET - това е най-често използваният метод за HTTP заявки. Той се използва за извличане на информация от уеб сървър. Например, когато въвеждате URL адрес в уеб браузър, браузърът изпраща GET заявка към сървъра, за да получи съдържанието на уеб страницата.

POST - този метод се използва за изпращане на данни към уеб сървър. При POST заявките, данните се изпращат към сървъра като част от тялото на заявката. POST заявките се използват често за изпращане на форми, като например при регистрация на потребител.

PUT - този метод се използва за обновяване на съществуващи ресурси на уеб сървъра. Например, може да се използва PUT заявка, за да се качи нова версия на съществуващ файл на уеб сървъра.

DELETE - този метод се използва за изтриване на съществуващи ресурси на уеб сървъра. Например, може да се използва DELETE заявка, за да се изтрие съдържание от уеб страница или файл от уеб сървъра.

HEAD - този метод се използва за получаване на хедър информацията за даден ресурс на уеб сървъра, без да се изпраща цялото тяло на ресурса. Това може да бъде полезно за проверка на метаданните за ресурса, като например дата на последна актуализация или размер на файла.

OPTIONS - този метод се използва за получаване на списък от поддържани HTTP методи за даден ресурс на уеб сървъра.

3.Клиент-сървърна комуникация - Клиент-сървърната архитектура се състои от два типа компютърни програми:

Клиентски програми - това са приложения, които работят на устройството на крайния потребител, като например уеб браузъри, мобилни приложения или програми за работа на настолни компютри. Клиентските приложения използват различни протоколи, като HTTP, FTP, SMTP и други, за да комуникират със сървърните приложения.

Сървърни програми - това са приложения, които работят на сървъра и предоставят услуги на клиентските програми. Сървърните приложения съхраняват и обработват данни, предоставят функционалност, като например бази данни, уеб сървъри, мрежови служби и други.

Процесът на клиент-сървърна комуникация може да бъде представен в следните стъпки:

Клиентското приложение изпраща заявка към сървъра, като използва определен протокол за комуникация, като например HTTP.

Сървърното приложение получава заявката и обработва я, като изпълнява необходимите операции и изпраща отговор към клиентското приложение.

Клиентското приложение получава отговора от сървъра и го обработва, за да изведе резултатите на потребителя.

Комуникацията между клиента и сървъра може да продължи в зависимост от нуждите на приложението, като например при изпращане на последователни заявки.

4.Основни тагове в HTML - <html> - Този таг определя началото и края на HTML документа.
<head> - Този таг съдържа информация за уеб страницата, като заглавие, метатегове, скриптове и други елементи.
<body> - Този таг съдържа съдържанието на уеб страницата, като текст, изображения, линкове, формуляри и други елементи.
<h1> до <h6> - Тези тагове определят заглавията на различните секции на страницата, като <h1> е най-големият заглавен таг, а <h6> е най-малкият.
<p> - Този таг създава нов абзац на страницата.
<img> - Този таг вмъква изображения на страницата, като използва атрибути като src, alt и други.
<a> - Този таг създава линкове към други уеб страници или документи, като използва атрибути като href, target и други.
<ul> и <ol> - Тези тагове създават списъци с точки или номера, като използват таговете <li> за да дефинират елементите на списъка.
<table> - Този таг създава таблица на страницата, като използва таговете <tr> за да дефинира редовете и <td> за да дефинира клетките.
<form> - Този таг създава формуляри на страницата, като използва атрибути като action, method и други за да определи действията на формуляра.

5.Селектори и основни правила в CSS - Таг селектор - използва се за да приложи стил към всички елементи на определен тип таг, като например <p> или <h1>:
Клас селектор - използва се за да приложи стил към всички елементи, които имат определен клас, като например .my-class
ID селектор - използва се за да приложи стил към единствен елемент, който има определено ID, като например #my-id
Селектор на атрибут - използва се за да приложи стил към елементи, които имат определен атрибут, като например [href]
Основните правила в CSS включват:
Структура на правилата - правилата се състоят от селектор и блок от декларации, които определят стилове.
Приоритет на стиловете - CSS използва правило на каскадата за да определи приоритета на стиловете. Приоритетът се определя в следния ред: инлайн стилове, ID селектори, клас селектори, таг селектори и универсални селектори.
Наследяване на стиловете - CSS използва наследяването на стилове, където децата на един елемент наследяват стиловете на родителя си, освен ако не се зададе друго в CSS.
Каскадиране на стиловете - CSS използва каскадиране на стиловете, където последният дефиниран стил има по-голям приоритет и зам

6.Създаване на семантични страници - Създаването на семантични уеб страници е важно за оптимизирането на уеб страниците за търсачките, увеличаването на достъпността за потребителите и подобряване на уеб дизайна. Ето някои препоръки за създаване на семантични уеб страници:

Използвайте подходящи HTML елементи за съответните съдържателни елементи на страницата. Например използвайте <header> за заглавния блок, <nav> за навигационното меню, <main> за основното съдържание на страницата и т.н.

Използвайте подходящи атрибути за описване на съдържанието на елементите. Например, използвайте атрибута alt за описание на алтернативен текст на изображенията и title за подсказки на линковете.

Избягвайте използването на таблици за представяне на не-таблични данни, като например за оформление на дизайна на страницата. Вместо това използвайте семантични HTML елементи и CSS за стилизиране.

Оптимизирайте съдържанието на страницата за търсачки, като използвате ключови думи в заглавията, метатеговете и описанията на страницата.

Следете за достъпността на страницата за потребителите, като използвате подходящи елементи и атрибути за хора с увреждания, като например aria-label за описание на изображенията.

Използвайте валиден HTML код за да осигурите правилното интерпретиране на съдържанието на страницата от браузърите и търсачките.

Поддържайте консистентен дизайн на страницата, като използвате стандартизирани CSS класове и имена на елементи, като например BEM (Block Element Modifier) методологията.

Тествайте страницата в различни браузъри и устройства, за да осигурите правилното и оптимално изглеждане на страницата за всички потребители.

7. Създаване на адаптивно (responsive) оформление на страници - Адаптивното (responsive) оформление на уеб страници позволява страниците да се адаптират към различни размери на екрана и устройства, като например настолни компютри, таблети или мобилни телефони. Ето някои препоръки за създаване на адаптивно оформление на уеб страници:

Използвайте възможно най-малко абсолютни единици за измерване, като например пиксели (px), за да може уеб страницата да се скалира правилно.

Използвайте медиа заявки (media queries), за да определите оптималните стилове на страницата за различните размери на екрана. Например, използвайте медия заявка, която ще използва други стилове, когато екранът е по-малък от 768px.

Използвайте резинови (flexible) елементи и контейнери, като например flexbox, за да се адаптират и да се разширяват, когато екранът е по-голям.

Избягвайте използването на таблици и фиксирани ширини, тъй като те могат да ограничат възможността за адаптиране на страницата.

Отделете съдържанието от дизайна, като използвате CSS за стилизиране, вместо да се разчита на таблици и HTML атрибути.

Използвайте леки изображения и оптимизирайте големината на изображенията, като използвате формати като JPEG, SVG или WebP.

Тествайте страницата в различни устройства и браузъри, за да се уверите, че се скалира правилно и е добре изглежда на всички устройства.

Създаването на адаптивно оформление на уеб страници може да бъде трудно, но може да доведе до удобно и приятно изживяване за потребителите на страницата на различни устройства.

8.Увод в JavaScript – работа с обекти и събития - JavaScript е един от най-популярните езици за програмиране, който се използва за създаване на динамични уеб страници и приложения. В тази статия ще се запознаете с основните концепции за работа с обекти и събития в JavaScript.

Обекти в JavaScript:

Обектите са един от най-важните елементи в JavaScript. Те представляват колекция от ключове и стойности, където ключовете са свойства, а стойностите могат да бъдат различни типове данни като числа, низове, масиви и други обекти. Обектите могат да се дефинират по много начини, но най-често се използва следният синтаксис
Събитията в JavaScript са действия, които се случват на уеб страницата и може да бъдат отразени в кода. Най-често използваните събития включват кликване на бутон, навлизане на мишката върху елемент, въвеждане на клавиш на клавиатурата и други. 
В заключение, работата с обекти и събития в JavaScript е важна част от създаването на динамични уеб страници и приложения. Запознаването с тези концепции ще ви помогне да създавате по-сложни и интерактивни уеб страници и приложения.

9.Принципи и манипулиране на DOM - DOM е съкращение от Document Object Model и представлява структурата на HTML документа, която браузърът може да манипулира с помощта на JavaScript. DOM се състои от дървовидна структура от елементи и текстове, която може да се манипулира с помощта на JavaScript.

Принципи на работа с DOM:

Изберете елементите, с които искате да работите. За да изберете елемент, можете да използвате методи като document.getElementById(), document.getElementsByClassName(), document.querySelector(), document.querySelectorAll() и други.

Използвайте методи за манипулиране на избраните елементи. Методите включват добавяне на нов елемент, премахване на съществуващ елемент, промяна на стилове, текстове и други.

Манипулиране на DOM:

Избиране на елемент:
За да изберете елемент в DOM, можете да използвате методи като document.getElementById(), document.getElementsByClassName(), document.querySelector(), document.querySelectorAll() и други.
Промяна на текст:
За да промените текста на елемент в DOM, можете да използвате свойството innerHTML
Промяна на стилове:
За да промените стиловете на елемент в DOM, можете да използвате свойството style
Добавяне на нов елемент:
За да добавите нов елемент в DOM, можете да използвате методите createElement() и appendChild()
Премахване на елемент:
За да премахнете елемент от DOM, можете да използвате метода removeChild()
В заключение, манипулирането на DOM с помощта на JavaScript е много важно за създаването на динамични уеб страници и приложения. Като се запознаете с основните принципи и методи за манипулиране на DOM, ще можете да създавате по-сложни и интерактивни уеб страници и приложения.