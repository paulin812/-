Изчисления, линейни, разклонени и циклични алгоритми

1.Програмирането е процесът на създаване на компютърни програми, като се използват инструкции, които компютърът може да разбере. Тези инструкции обикновено се пишат на езици за програмиране.
Език за програмиране е формален език, който служи за написване на компютърни програми. Тези езици могат да бъдат ниско ниво (като машинен код), средно ниво (като C или Python) или високо ниво (като Java или Ruby).
Средата за разработка (IDE) е софтуерно приложение, което се използва за създаване и редактиране на програмен код. Тя предоставя функционалности като синтаксис подчертаване, автоматично допълване на кода, интегрирано тестване и дебъгване на кода.
Компилация е процесът на превръщане на програмен код от един език за програмиране в друг формат, който може да бъде изпълнен от компютъра. Компилаторът прочита програмния код на изходния език и го превръща в машинен код, който може да бъде изпълнен от компютъра.
Интерпретацията е процесът на изпълнение на програмен код директно от интерпретатор, без предварителна компилация на програмния код. Интерпретаторът прочита програмния код и го изпълнява ред по ред.
За да демонстрираме употребата на основни функционалности на среда за разработка, можем да започнем като създадем нов проект в среда за разработка като например Visual Studio. След като сме създали нов проект, можем да започнем да пишем нашето приложение в програмен код, използвайки синтаксис подчертаване и автоматично допълване на кода.
След като приложението е готово, можем да го компилираме или да го интерпретираме, в зависимост от програмния език и настройките на нашата IDE. Можем да изпълним нашето приложение в средата за разработка, за да проверим дали работи правилно и да отстраним грешки, ако има такива.

2.Променливата е конструкция в програмирането, която се използва за съхраняване на данни в паметта на компютъра. Това са данни, които могат да се променят по време на изпълнение на програмата.
В програмирането има няколко типа променливи, които са подходящи за съхранение на различни видове данни. Най-често използваните типове променливи са:
Целочислени (integer) - използват се за съхранение на цели числа. Пример: int num = 10;
Символни (char) - използват се за съхранение на единични символи. Пример: char letter = 'a';
Реални (float и double) - използват се за съхранение на числа с десетична точка. Пример: float num = 1.5;
Булеви (bool) - използват се за съхранение на стойности true или false. Пример: bool isReady = true;
За да използваме променливите в програмата, можем да използваме аритметични и логически операции. Например:
int num1 = 5;
int num2 = 3;
int sum = num1 + num2; // резултатът ще бъде 8
int difference = num1 - num2; // резултатът ще бъде 2
bool isGreater = num1 > num2; // резултатът ще бъде true
Логическите операции могат да бъдат използвани за сравнение на променливи и други стойности. Например:
bool isTrue = true;
bool isFalse = false;
bool isEqual = isTrue == isFalse; // резултатът ще бъде false
Аритметичните и логически операции могат да бъдат комбинирани за създаване на по-сложни изрази. Например:
int num1 = 10;
int num2 = 3;
bool isGreater = (num1 + num2) > 15; // резултатът ще бъде true
Такива изрази са често използвани за условни изявления и при взимане на решения в програмата.

3.Условните конструкции са сред основните инструменти в програмирането, които ни позволяват да контролираме изпълнението на програмата в зависимост от определени условия.
Пълната форма на условната конструкция включва ключовата дума "if", последвана от условие в скоби, за да се провери дали това условие е вярно. Ако условието е вярно, програмата изпълнява блок от код, който е разположен в скобите след "if". Ако условието не е вярно, програмата продължава изпълнението си след блока от код.
Кратката форма на условната конструкция използва тернарен оператор "?", който ни позволява да изберем между две стойности, в зависимост от условие. Това може да бъде много удобно за кратки изрази, където имаме само две възможни стойности.
Операторът за многовариантен избор "switch" ни позволява да проверим стойността на променлива и да изберем между няколко възможни действия, в зависимост от стойността на променливата.
В сравнение с няколко условия "else if", операторът за многовариантен избор "switch" може да бъде по-лесен за четене и разбиране, когато имаме много възможни стойности, които трябва да се проверят.

4.Операторите за цикли в програмирането се използват за изпълнение на даден блок код повтарящ се определен брой пъти или докато бъде изпълнено определено условие.
В езика C# имаме три основни оператора за цикъл:
for - използва се за извършване на цикъл определен брой пъти, като обикновено се използва при работа със списъци или масиви.
while - изпълнява даден блок код, докато е изпълнено определено условие.
do-while - подобен на while, но блокът на код се изпълнява поне веднъж, преди да се провери условието.
Важно е да се внимава при използването на операторите за цикъл, тъй като при неправилно използване може да възникнат безкраен цикъл или други проблеми.

5.Подпрограмите (функции/методи) са блокове от код, които изпълняват определени операции и могат да бъдат извикани многократно в програмата. Те са полезни, когато имаме определена функционалност, която искаме да използваме повтарящо се в програмата, за да не повтаряме едни и същи логически операции няколко пъти.
Методите в C# могат да приемат параметри и да връщат стойности. Параметрите са данни, които се предават към метода, когато той се извиква, за да могат да бъдат използвани в блока от код на метода. В C# има два типа параметри - стойностни и референтни. Стойностните параметри копират стойността на параметъра при извикването на метода, докато референтните параметри предават референция към обекта, който да се използва в метода.
Връщаните стойности са данни, които се връщат от метода след като той завърши изпълнението си. В C# методите могат да връщат стойности от всякакъв тип - цели числа, символи, низове, булеви стойности, обекти и др.
Едно от големите предимства на използването на методи е, че ни позволяват да напишем лесно поддръжаем и преизползваем код. Когато имаме дадена функционалност, която искаме да използваме многократно в програмата, ние можем да я изнесем в отделен метод и да я извикваме при нужда. Това ни позволява да избегнем повтарящ се код в програмата и да я направим по-лесна за четене и поддръжка.

6.Определяне на реда на изпълнение на фрагментите в кода (program flow):
Редът на изпълнение на фрагментите в кода се определя от програмния поток. В програмния поток са включени всички инструкции, които трябва да се изпълнят при стартиране на програмата. При изпълнението на програмата компютърът изпълнява инструкциите една след друга в реда, в който са записани в програмния поток.
Работа със среда за разработка (IDE) – създаване и зареждане на проект в среда за разработка:
Среда за разработка (IDE) е програмен инструмент, който позволява на програмистите да разработват, тестват и отлагат програми в едно интегрирано около.
За да създадем нов проект в средата за разработка, най-често трябва да използваме опцията "New Project" или "Create New Project". Последвайте инструкциите на екрана, за да зададете име на проекта, място за запазване и други настройки, които могат да варират в зависимост от избраната IDE.
За да заредим съществуващ проект в средата за разработка, изберете опцията "Open Project" или "Open File". Изберете проекта, който искате да заредите, и натиснете "Open".
След като сте създали или заредили проекта си в средата за разработка, можете да започнете да работите върху него, като добавяте нови файлове, редактирате съществуващи кодове или компилирате и изпълнявате програмата.